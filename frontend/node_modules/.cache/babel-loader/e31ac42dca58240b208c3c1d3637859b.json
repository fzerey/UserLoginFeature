{"ast":null,"code":"import { userConstants } from '../_constants';\nimport { userService } from '../_services';\nimport { alertActions } from './';\nimport { history } from '../_helpers';\nexport const userActions = {\n  login,\n  logout,\n  register,\n  verify,\n  retrievePassword,\n  getOnlineCount\n};\n\nfunction login(username, password) {\n  return dispatch => {\n    dispatch(request({\n      username\n    }));\n    userService.login(username, password).then(user => {\n      dispatch(success(user));\n      history.push('/');\n    }, error => {\n      dispatch(failure(error));\n      dispatch(alertActions.error(error));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.LOGIN_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.LOGIN_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.LOGIN_FAILURE,\n      error\n    };\n  }\n}\n\nfunction logout() {\n  userService.logout();\n  return {\n    type: userConstants.LOGOUT\n  };\n}\n\nfunction register(user) {\n  return dispatch => {\n    dispatch(request(user));\n    userService.register(user).then(user => {\n      dispatch(success());\n      history.push('/verify');\n      dispatch(alertActions.success('Registration successful'));\n    }, error => {\n      dispatch(failure(error));\n      dispatch(alertActions.error(error));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.REGISTER_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.REGISTER_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n}\n\nfunction verify(email, code) {\n  return dispatch => {\n    dispatch(request(email));\n    userService.verify(email, code).then(() => {\n      dispatch(success());\n      history.push('/login');\n      dispatch(alertActions.success('Verification successful'));\n    }, error => {\n      dispatch(failure(error));\n      dispatch(alertActions.error(error));\n    });\n  };\n\n  function request() {\n    return {\n      type: userConstants.VERIFICATION_REQUEST\n    };\n  }\n\n  function success() {\n    return {\n      type: userConstants.VERIFICATION_SUCCESS\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.VERIFICATION_FAILURE,\n      error\n    };\n  }\n}\n\nfunction retrievePassword(email) {\n  return dispatch => {\n    dispatch(request(email));\n    userService.retrievePassword(email).then(() => {\n      dispatch(success());\n      history.push('/login');\n      dispatch(alertActions.success('Password sent'));\n    }, error => {\n      dispatch(failure(error));\n      dispatch(alertActions.error(error));\n    });\n  };\n\n  function request() {\n    return {\n      type: userConstants.RETRIEVAL_REQUEST\n    };\n  }\n\n  function success() {\n    return {\n      type: userConstants.RETRIEVAL_SUCCESS\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.RETRIEVAL_FAILURE,\n      error\n    };\n  }\n}\n\nfunction getOnlineCount() {\n  return dispatch => {\n    dispatch(request());\n    userService.getOnlineCount().then(response => dispatch(success(response.message)), error => dispatch(failure(error)));\n  };\n\n  function request() {\n    return {\n      type: userConstants.GETONLINECOUNT_REQUEST\n    };\n  }\n\n  function success(response) {\n    return {\n      type: userConstants.GETONLINECOUNT_SUCCESS,\n      response\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.GETONLINECOUNT_FAILURE,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/home/furkan/assessment-react/frontend_2/src/_actions/user.actions.js"],"names":["userConstants","userService","alertActions","history","userActions","login","logout","register","verify","retrievePassword","getOnlineCount","username","password","dispatch","request","then","user","success","push","error","failure","type","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","email","code","VERIFICATION_REQUEST","VERIFICATION_SUCCESS","VERIFICATION_FAILURE","RETRIEVAL_REQUEST","RETRIEVAL_SUCCESS","RETRIEVAL_FAILURE","response","message","GETONLINECOUNT_REQUEST","GETONLINECOUNT_SUCCESS","GETONLINECOUNT_FAILURE"],"mappings":"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","sourcesContent":["import { userConstants } from '../_constants';\nimport { userService } from '../_services';\nimport { alertActions } from './';\nimport { history } from '../_helpers';\n\nexport const userActions = {\n    login,\n    logout,\n    register,\n    verify,\n    retrievePassword,\n    getOnlineCount\n};\n\nfunction login(username, password) {\n    return dispatch => {\n        dispatch(request({ username }));\n\n        userService.login(username, password)\n            .then(\n                user => { \n                    dispatch(success(user));\n                    history.push('/');\n                },\n                error => {\n                    dispatch(failure(error));\n                    dispatch(alertActions.error(error));\n                }\n            );\n    };\n\n    function request(user) { return { type: userConstants.LOGIN_REQUEST, user } }\n    function success(user) { return { type: userConstants.LOGIN_SUCCESS, user } }\n    function failure(error) { return { type: userConstants.LOGIN_FAILURE, error } }\n}\n\nfunction logout() {\n    userService.logout();\n    return { type: userConstants.LOGOUT };\n}\n\nfunction register(user) {\n    return dispatch => {\n        dispatch(request(user));\n\n        userService.register(user)\n            .then(\n                user => { \n                    dispatch(success());\n                    history.push('/verify');\n                    dispatch(alertActions.success('Registration successful'));\n                },\n                error => {\n                    dispatch(failure(error));\n                    dispatch(alertActions.error(error));\n                }\n            );\n    };\n\n    function request(user) { return { type: userConstants.REGISTER_REQUEST, user } }\n    function success(user) { return { type: userConstants.REGISTER_SUCCESS, user } }\n    function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n}\n\nfunction verify(email, code){\n    return dispatch => {\n        dispatch(request(email));\n        userService.verify(email, code)\n            .then(\n                () => {\n                    dispatch(success());\n                    history.push('/login');\n                    dispatch(alertActions.success('Verification successful'));\n                    \n                },\n                error => {\n                    dispatch(failure(error));\n                    dispatch(alertActions.error(error));\n                }\n            )\n    }\n    function request() { return { type: userConstants.VERIFICATION_REQUEST } }\n    function success() { return { type: userConstants.VERIFICATION_SUCCESS } }\n    function failure(error) { return { type: userConstants.VERIFICATION_FAILURE, error } }\n}\n\nfunction retrievePassword(email){\n    return dispatch => {\n        dispatch(request(email));\n        userService.retrievePassword(email)\n            .then(\n                () => {\n                    dispatch(success());\n                    history.push('/login');\n                    dispatch(alertActions.success('Password sent'));\n                    \n                },\n                error => {\n                    dispatch(failure(error));\n                    dispatch(alertActions.error(error));\n                }\n            )\n    }\n    function request() { return { type: userConstants.RETRIEVAL_REQUEST } }\n    function success() { return { type: userConstants.RETRIEVAL_SUCCESS } }\n    function failure(error) { return { type: userConstants.RETRIEVAL_FAILURE, error } }\n}\n\nfunction getOnlineCount(){\n    return dispatch => {\n        dispatch(request());\n        userService.getOnlineCount()\n            .then(\n                response => dispatch(success(response.message)),\n                error => dispatch(failure(error))\n            );\n    };\n\n    function request() { return { type: userConstants.GETONLINECOUNT_REQUEST } }\n    function success(response) { return { type: userConstants.GETONLINECOUNT_SUCCESS, response } }\n    function failure(error) { return { type: userConstants.GETONLINECOUNT_FAILURE, error } }\n}\n"]},"metadata":{},"sourceType":"module"}